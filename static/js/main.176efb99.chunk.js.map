{"version":3,"sources":["text_editor.js","App.js","serviceWorker.js","index.js"],"names":["StyleMap","STRIKE","textDecoration","Huge","fontSize","Normal","Small","Georgia","fontFamily","Palatino","TimesNewRoman","Arial","ArialBlack","ComicSans","Impact","Lucida","Tahoma","Courier","INLINE_STYLES","label","style","BLOCK_STYLES","ButtonWithFn","props","react_default","a","createElement","onMouseDown","onToggle","LineDecoratonBtns","map","iStyle","text_editor_ButtonWithFn","key","BlockDecorationBtns","bStyle","myBlockStyleFn","contentBlock","getType","TextEditor","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","editorState","EditorState","createEmpty","showURLInput","url","urlType","focus","refs","onChange","setState","toggleInlineStyle","_toggleInlineStyle","bind","assertThisInitialized","toggleBlockType","_toggleBlockType","inlineStyle","RichUtils","blockType","undo","redo","text_editor_LineDecoratonBtns","text_editor_BlockDecorationBtns","onClick","onUndoClick","onRedoClick","className","Draft","customStyleMap","placeholder","ref","blockStyleFn","Component","App","src_text_editor","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.176efb99.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Editor, EditorState, RichUtils } from \"draft-js\";\nimport \"./text-editor.css\";\n\n// в darftjs имплементированы BOLD ITALIC UNDERLINE стили. Создаем кастомный стиль для зачеркнутых слов\nconst StyleMap = {\n  STRIKE: {\n    textDecoration: \"line-through\"\n  },\n  Huge: {\n    fontSize: \"xx-large\"\n  },\n  Normal: {\n    fontSize: \"medium\"\n  },\n  Small: {\n    fontSize: \"xx-small\"\n  },\n  Georgia: {\n    fontFamily: [\"Georgia\", \"serif\"]\n  },\n  Palatino: {\n    fontFamily: [\"Palatino Linotype\", \"Book Antiqua\", \"Palatino\", \"serif\"]\n  },\n  TimesNewRoman: {\n    fontFamily: [\"Times New Roman\", \"Times\", \"serif\"]\n  },\n  Arial: {\n    fontFamily: [\"Arial\", \"Helvetica\", \"sans-serif\"]\n  },\n  ArialBlack: {\n    fontFamily: [\"Arial Black\", \"Gadget\", \"sans-serif\"]\n  },\n  ComicSans: {\n    fontFamily: [\"Comic Sans MS\", \"cursive\", \"sans-serif\"]\n  },\n  Impact: {\n    fontFamily: [\"Impact\", \"Charcoal\", \"sans-serif\"]\n  },\n  Lucida: {\n    fontFamily: [\"Lucida Sans Unicode\", \"Lucida Grande\", \"sans-serif\"]\n  },\n  Tahoma: {\n    fontFamily: [\"Tahoma\", \"Geneva\", \"sans-serif\"]\n  },\n  Courier: {\n    fontFamily: [\"Courier New\", \"Courier\", \"monospace\"]\n  }\n};\n\n// Виды линейных стилей\nconst INLINE_STYLES = [\n  { label: \"Bold\", style: \"BOLD\" },\n  { label: \"Italic\", style: \"ITALIC\" },\n  { label: \"Underline\", style: \"UNDERLINE\" },\n  { label: \"Strikethrough\", style: \"STRIKE\" },\n  { label: \"Huge\", style: \"Huge\" },\n  { label: \"Normal\", style: \"Normal\" },\n  { label: \"Small\", style: \"Small\" },\n  { label: \"Georgia\", style: \"Georgia\" },\n  { label: \"Palatino\", style: \"Palatino\" },\n  { label: \"TimesNewRoman\", style: \"TimesNewRoman\" },\n  { label: \"Arial\", style: \"Arial\" },\n  { label: \"ArialBlack\", style: \"ArialBlack\" },\n  { label: \"ComicSans\", style: \"ComicSans\" },\n  { label: \"Impact\", style: \"Impact\" },\n  { label: \"Lucida\", style: \"Lucida\" },\n  { label: \"Tahoma\", style: \"Tahoma\" },\n  { label: \"Courier\", style: \"Courier\" }\n];\n\n// Виды блочных стилей\nconst BLOCK_STYLES = [\n  { label: \"UL\", style: \"unordered-list-item\" },\n  { label: \"OL\", style: \"ordered-list-item\" },\n  { label: \"Indent\", style: \"indent\" },\n  { label: \"aLeft\", style: \"a-left\" },\n  { label: \"aCenter\", style: \"a-center\" },\n  { label: \"aRight\", style: \"a-right\" },\n  { label: \"aJust\", style: \"a-just\" }\n];\n\n// Кнопка с функцией\nconst ButtonWithFn = props => {\n  const onPress = () => {\n    props.onToggle(props.style);\n  };\n  return <button onMouseDown={onPress}>{props.label}</button>;\n};\n\n// Рендеринг кнопок для линейных декораций\nconst LineDecoratonBtns = props => {\n  return (\n    <div>\n      {INLINE_STYLES.map(iStyle => (\n        <ButtonWithFn\n          key={iStyle.label}\n          label={iStyle.label}\n          style={iStyle.style}\n          onToggle={props.onToggle}\n        />\n      ))}\n    </div>\n  );\n};\n\n// Рендеринг кнопок для блочных декораций\nconst BlockDecorationBtns = props => {\n  return (\n    <div>\n      {BLOCK_STYLES.map(bStyle => (\n        <ButtonWithFn\n          key={bStyle.label}\n          label={bStyle.label}\n          style={bStyle.style}\n          onToggle={props.onToggle}\n        />\n      ))}\n    </div>\n  );\n};\n\nfunction myBlockStyleFn(contentBlock) {\n  const type = contentBlock.getType();\n  switch (type) {\n    case \"indent\":\n      return \"textIndentation\";\n    case \"a-left\":\n      return \"textAlignLeft\";\n    case \"a-center\":\n      return \"textAlignCenter\";\n    case \"a-right\":\n      return \"textAlignRight\";\n    case \"a-just\":\n      return \"textAlignJustify\";\n    default:\n      return;\n  }\n}\n\n// Сам текстовый редактор\nclass TextEditor extends Component {\n  // ----------------------------------------------- TODO требуется переписать состояние компонента с использованием redux\n  constructor(props) {\n    super(props);\n    this.state = {\n      editorState: EditorState.createEmpty(),\n      showURLInput: false,\n      url: \"\",\n      urlType: \"\"\n    };\n    this.focus = () => this.refs.focus();\n    this.onChange = editorState => this.setState({ editorState });\n    this.toggleInlineStyle = this._toggleInlineStyle.bind(this);\n    this.toggleBlockType = this._toggleBlockType.bind(this);\n  }\n\n  _toggleInlineStyle(inlineStyle) {\n    this.onChange(\n      RichUtils.toggleInlineStyle(this.state.editorState, inlineStyle)\n    );\n  }\n\n  _toggleBlockType(blockType) {\n    this.onChange(RichUtils.toggleBlockType(this.state.editorState, blockType));\n  }\n\n  onUndoClick() {\n    this.onChange(EditorState.undo(this.state.editorState));\n  }\n\n  onRedoClick() {\n    this.onChange(EditorState.redo(this.state.editorState));\n  }\n\n  render() {\n    return (\n      <div>\n        <LineDecoratonBtns onToggle={this.toggleInlineStyle} />\n        <BlockDecorationBtns onToggle={this.toggleBlockType} />\n        <button onClick={this.onUndoClick.bind(this)}>Undo</button>\n        <button onClick={this.onRedoClick.bind(this)}>Redo</button>\n        <div className=\"editor-container\">\n          <Editor\n            customStyleMap={StyleMap}\n            editorState={this.state.editorState}\n            onChange={this.onChange}\n            placeholder=\"Введите текст\"\n            ref=\"Текстовый редактор\"\n            blockStyleFn={myBlockStyleFn}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TextEditor;\n","import React, { Component } from \"react\";\nimport TextEditor from \"./text_editor\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <TextEditor />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}